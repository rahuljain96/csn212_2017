//Problem 1

// C program to find longest Zig-Zag subsequence in
// an array
#include <stdio.h>
#include <stdlib.h>
 
// function to return max of two numbers
int max(int a, int b) {  return (a > b) ? a : b; }
 
// Function to return longest Zig-Zag subsequence length
int zigzag(int nos[], int n)
{
    /*Z[i][0] = Length of the longest Zig-Zag subsequence
          ending at index i and last element is greater
          than its previous element
     Z[i][1] = Length of the longest Zig-Zag subsequence
          ending at index i and last element is smaller
          than its previous element   */
    int Z[n][2];
 
    /* Initialize all values from 1  */
    for (int i = 0; i < n; i++)
        Z[i][0] = Z[i][1] = 1;
 
    int result = 1; // Initialize result
 
    /* Compute values in bottom up manner */
    for (int i = 1; i < n; i++)
    {
        // Consider all elements as previous of arr[i]
        for (int j = 0; j < i; j++)
        {
            // If nos[i] is greater, then check with Z[j][1]
            if (nos[j] < nos[i] && Z[i][0] < Z[j][1] + 1)
                Z[i][0] = Z[j][1] + 1;
 
            // If nos[i] is smaller, then check with Z[j][0]
            if( nos[j] > nos[i] && Z[i][1] < Z[j][0] + 1)
                Z[i][1] = Z[j][0] + 1;
        }
 
        /* Pick maximum of both values at index i  */
        if (result < max(Z[i][0], Z[i][1]))
            result = max(Z[i][0], Z[i][1]);
    }
 
    return result;
}
 
/* Driver program */
int main()
{
    int nos[] = { 70, 55, 13, 2, 99, 2, 80, 80, 80, 80, 100, 19, 7, 5, 5, 5, 1000, 32, 32 };
    int n = nos.length;
    printf("Length of Longest Zig-Zag subsequence is %d\n",
            zigzag(nos, n) );
    return 0;
}

// Problem 2

public class AvoidRoads {
    private long[][] map;

    private boolean blocked(int wS, int wE, int hS, int hE, String[] bad) {
        String str = wS + " " + wE + " " + hS + " " + hE;
        for (String s : bad) {
            if (s.equals(str)) {
                return true;
            }
        }
        return false;
    }

    private long calculatePaths(int width, int height, String[] bad, long[][] map) {
        if ((width == 1 && height == 0 && !blocked(width - 1, height, width, height, bad)) ||
            (height == 1 && width == 0 && !blocked(width, height - 1, width, height, bad))) {
            return 1;
        }
        int lowWidth = width - 1;
        int lowHeight = height - 1;
        long result = 0;
        if (lowWidth >= 0 && !blocked(lowWidth, height, width, height, bad)
                && !blocked(width, height, lowWidth, height, bad)) {
           result += map[height][lowWidth];
        }
        if (lowHeight >= 0 && !blocked(width, lowHeight, width, height, bad)
                && !blocked(width, height, width, lowHeight, bad)) {
           result += map[lowHeight][width];
        }
        return result;
    }

    public long numWays(int width, int height, String[] bad) {
        map = new long[width + 1][height + 1];
        map[0][0] = 0;
        int levelWidth = 0;
        int levelHeight = 0;
        while (levelWidth <= width && levelHeight <= height) {
            for (int i = 0; i <= height && levelWidth <= width; i += 1) {
               map[i][levelWidth] = calculatePaths(levelWidth, i, bad, map);
            }
            levelWidth += 1;
            for (int i = 0; i <= width && levelHeight <= height; i += 1) {
               map[levelHeight][i] = calculatePaths(i, levelHeight, bad, map);
            }
            levelHeight += 1;
        }
        return map[height][width];
    }

    public long[][] getMap() {
        return this.map;
    }

    public static void main(String[] args) {
        AvoidRoads instance = new AvoidRoads();
        String[] bad = {"0 0 0 1", "6 6 5 6"};
        System.out.println(instance.numWays(6, 6, bad));
//        long[][] map = instance.getMap();
//        for (int i = 0; i < map.length; i += 1) {
//            for (int j = 0; j < map[i].length; j += 1) {
//                System.out.print(map[i][j] + "\t");
//            }
//            System.out.println();
//        }
    }
}

// Problem 3

#include <bits/stdc++.h>
using namespace std;
 
int binary_search(int list[],int r,int num){
	int l=0;
	while(r-l>1){
		int m=(l+r)/2;
		if(list[m]>num)
		r=m;
		else
		l=m;
	}
	return r;
}
 
int LongestIncreasingSubsequence(long long int a[],int s,int n){
	int *list=new int[n];
	memset(list,0,sizeof(list[0])*n);
 
	list[0]=a[s];
	int len=1;
	for(int i=s+1;i<n+s;i++){
		if(a[i]<list[0])
		list[0]=a[i];
		
		else if (a[i]>list[len-1])
		list[len++]=a[i];
		
		else
		list[binary_search(list,len-1,a[i])]=a[i];
	}
	return len;
}
 
 
int main(){
    int t;
    cin>>t;
    while(t--){
	
	int n;
	cin>>n;
	long long int a[2*n];
	for(int i=0;i<n;i++)
	{
	cin>>a[i];
	a[n+i]=a[i];       //copying same array two times in an array so that each elemnt has access to next n-1 numbers
    }
    int max=0;
    int answer;
	for(int i=0;i<n;i++){	
    answer=LongestIncreasingSubsequence(a,i,n);
    if(answer>max)
    max=answer;	
   }
	cout<<max<<endl;
 
}
	return 0;
} 
 
